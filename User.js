// Importa√ß√£o da classe Person que herda tudo da classe Address
const { Person } = require("./Person");

// Usu√°rio herda tudo da classe Person
class User extends Person {
    constructor(fullName, cpf, birthday, cellPhone, street, number, neighborhood, city, state, zipCode, email, password) {
        super(fullName, cpf, birthday, cellPhone, street, number, neighborhood, city, state, zipCode);

        // Atributos espec√≠ficos do Usu√°rio
        this.email = email;
        this.senha = password;
        this.admin = false; // Cadastra como n√£o admin
        this.logado = false; // Utilizado para verificar se o usu√°rio est√° logado no sistema
        this.ativo = true; // Ativa o perfil ao criar conta
    };


    // M√©todos

    // Verifica se os dados do usu√°rio existem e, caso localize, permite a entrada no sistema
    login = (email, password) => {

        // Verifica se o email e senha informados conferem
        if (email === this.email && password === this.senha) {

            // Permite acessar a conta apenas se o cadastro estiver ativo
            if (this.ativo) {
                console.log('‚úÖ Usu√°rio conectado!');
                console.log(`üëã Ol√°, ${this.nomeCompleto}. Seja bem vindo(a)!`);
                this.logado = true;

                return true;
            }

            console.log("‚ö†Ô∏è  Cadastro desativado! \n Ative sua conta novamente para realizar o login.")
            return false;


            // Com base no email digitado, verifica se a senha do usu√°rio bate com a cadastrada
        } else if (email === this.email && password !== this.senha) {

            console.log('‚ùå Senha incorreta!');
            return false;

            // Verifica se os campos n√£o foram preenchidos
        } else if (email.trim() === "" || password.trim() === "") {
            console.log('‚ö†Ô∏è Os campos n√£o podem ficar vazios.\nPreencha-os para realizar o login.');
            return false;
        }

        console.log('‚ùå Usu√°rio n√£o localizado!');

    };


    // Sai do sistema
    logout = () => {

        // Verifica se est√° logado
        if (this.logado) {
            console.log('üîå Usu√°rio desconectado!');
            this.logado = false;
        }

    };


    // Utilizado para realizar a exclus√£o l√≥gica da conta
    deleteAccount = () => {
        // Se o usu√°rio estiver logado e com perfil ativo -> Exclui conta
        if (this.logado && this.ativo) {

            console.log('‚úÖ Cadastro exclu√≠do com sucesso!');

            this.ativo = false; // Desativa a conta
            this.logout(); // Sai da conta

            return true;
        }

        console.log('‚ö†Ô∏è Para excluir uma conta √© necess√°rio estar logado.')

    };


    // Reativa a conta
    reactivateAccount = (email, password) => {

        // Verifica se o email e senha informados conferem
        if (email === this.email && password === this.senha) {
            this.ativo = true; // Reativa a conta

            console.log('‚úÖ Conta reativada com sucesso! \n Realize o login.')

            return true;
        }

        console.log('‚ùå Usu√°rio n√£o localizado! \nüëÄ Verifique se os dados foram inseridos corretamente.');

    }


}


// Exportando o arquivo para ser utilizado em outros arquivos
module.exports = {
    User
};
